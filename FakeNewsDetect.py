#!/usr/bin/env python
# coding: utf-8

# In[38]:


import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import precision_score,f1_score


# In[13]:


# read the downloaded data
news = pd.read_csv('C:\\Users\\...\\Downloads\\news.csv')


# In[16]:


#shape and head
news.shape
news.head()


# In[17]:


#get the labels
labels = news.label
labels.head()


# In[18]:


# split into training and test dataset
x_train, x_test,y_train,y_test = train_test_split(news['text'], news['label'], test_size=0.2, random_state=7)


# In[19]:


# remove higher document frequency English stop words and then transform
news_vector = TfidfVectorizer(stop_words='english', max_df=0.7)
news_train = news_vector.fit_transform(x_train) # fitting and then transforming the train set
news_test = news_vector.transform(x_test)# only transforming using the scaling generated by fit method
        


# In[43]:


# passiveaggressiveclassifier remains passive for correct classification, but aggressive in the event of mistake.
classifier = PassiveAggressiveClassifier(max_iter=50)
classifier.fit(news_train,y_train) # fit the classifier on our train data
y_pred = classifier.predict(news_test) #predict the test set
acc = accuracy_score(y_test, y_pred)
print(f"Accuracy score is {acc*100}")


# In[ ]:


# our classifier gave a pretty accurate classification with an accuracy of 92.74%.


# In[47]:


# precision score- predicted positive rate
#The F1 score limits both the false positives and false negatives as much as possible. 
prec= precision_score(y_test,y_pred,pos_label='REAL')
f1= f1_score(y_test,y_pred,pos_label='REAL')
print(f'Precision is {prec*100} and F1 score is {f1*100}')


# In[33]:


# confusion matrix to get info on number of positives and negatives
cm=confusion_matrix(y_test,y_pred,labels= classifier.classes_)
cm


# In[34]:


classifier.classes_


# In[ ]:


# so we got 589 true negatives, 44 false negatives, 49 false positives and 585 true positives.


# In[36]:


disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=classifier.classes_)
disp.plot()

